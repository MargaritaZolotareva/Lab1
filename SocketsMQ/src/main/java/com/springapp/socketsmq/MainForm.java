package com.springapp.socketsmq;

import com.springapp.entities.Assignments;
import com.springapp.entities.Classes;
import com.springapp.entities.Departments;
import com.springapp.entities.Instructors;
import com.springapp.entities.Results;
import com.springapp.entities.Students;
import com.springapp.entities.StudentsAndClasses;
import com.springapp.helpers.DataMethodHelper;
import com.springapp.helpers.DbHelper;
import com.springapp.helpers.EntityHelper;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.naming.InitialContext;
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSocket;
import org.apache.commons.codec.binary.Base64;
import javax.jms.*;
import javax.naming.Context;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Margarita
 */
public class MainForm extends javax.swing.JFrame {

    static HashSet assignmentsIds = new HashSet();
    static HashSet classesIds = new HashSet();
    static HashSet departmentsIds = new HashSet();
    static HashSet instructorsIds = new HashSet();
    static HashSet resultsIds = new HashSet();
    static HashSet studentsIds = new HashSet();
    static HashSet studentsAndClassesIds = new HashSet();
    static Cipher cipher;
    SecretKey symmetricKey;
    PublicKey publicKey;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        SocketsButton = new javax.swing.JRadioButton();
        MQButton = new javax.swing.JRadioButton();
        SendDataButton = new javax.swing.JButton();
        SendSymKey = new javax.swing.JButton();
        receivePublicRSA = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup.add(SocketsButton);
        SocketsButton.setSelected(true);
        SocketsButton.setText("Sockets");
        SocketsButton.setActionCommand("socketsButton");

        buttonGroup.add(MQButton);
        MQButton.setText("MQ");

        SendDataButton.setText("Send data");
        SendDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendDataButtonActionPerformed(evt);
            }
        });

        SendSymKey.setText("Send key");
        SendSymKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendSymKeyActionPerformed(evt);
            }
        });

        receivePublicRSA.setText("Receive public RSA");
        receivePublicRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receivePublicRSAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MQButton)
                            .addComponent(SocketsButton)
                            .addComponent(SendDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 47, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(receivePublicRSA)
                            .addComponent(SendSymKey, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(SocketsButton)
                .addGap(32, 32, 32)
                .addComponent(MQButton)
                .addGap(18, 18, 18)
                .addComponent(SendDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(receivePublicRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SendSymKey, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendDataButtonActionPerformed
        try {
            // Fetch data from DB
            ResultSet rs = DbHelper.fetchDataFromDB();

            List<String> assignments = new ArrayList<>();
            List<String> classes = new ArrayList();
            List<String> departments = new ArrayList();
            List<String> instructors = new ArrayList();
            List<String> results = new ArrayList();
            List<String> students = new ArrayList();
            List<String> studentsAndClasses = new ArrayList();

            parseData(rs, assignments, classes, departments, instructors, results, students, studentsAndClasses);

            if (this.SocketsButton.isSelected()) {

            } else if (this.MQButton.isSelected()) {
                sendDataWithMQ(students);
                sendDataWithMQ(studentsAndClasses);
                sendDataWithMQ(classes);
                sendDataWithMQ(results);
                sendDataWithMQ(assignments);
                sendDataWithMQ(departments);
                sendDataWithMQ(instructors);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SendDataButtonActionPerformed

    private void sendKeyWithMQ() {
        try {
            initAESKey();
            System.out.println("Original symmetric key:" + Base64.encodeBase64String(this.symmetricKey.getEncoded()));
            Properties props = new Properties();
            props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
            props.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");
            props.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
            props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
            props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");
            Context ctx = new InitialContext(props);
            QueueConnectionFactory f = (QueueConnectionFactory) ctx.lookup("myQueueConnectionFactory");
            QueueConnection con = f.createQueueConnection();
            con.start();
            QueueSession ses = con.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
            Queue t = (Queue) ctx.lookup("keyQueue");
            QueueSender sender = ses.createSender(t);
            BytesMessage msg = ses.createBytesMessage();
            byte[] encKey = encryptByPublic(this.publicKey, this.symmetricKey.getEncoded());
            msg.writeBytes(encKey);
            sender.send(msg);
            System.out.println("Symmetric key successfully sent.");
            con.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void sendDataWithMQ(List<String> list) {
        try {
            Properties props = new Properties();
            props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
            props.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");
            props.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
            props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
            props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");
            Context ctx = new InitialContext(props);
            QueueConnectionFactory f = (QueueConnectionFactory) ctx.lookup("myQueueConnectionFactory");
            QueueConnection con = f.createQueueConnection();
            con.start();
            QueueSession ses = con.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
            Queue t = (Queue) ctx.lookup("dataQueue");
            QueueSender sender = ses.createSender(t);
            TextMessage msg = ses.createTextMessage();
            for (String obj : list) {
                msg.setText(obj);
                sender.send(msg);
            }
            System.out.println("List successfully sent.");
            con.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void SendSymKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendSymKeyActionPerformed
        sendKeyWithMQ();
        this.SendSymKey.setEnabled(false);
    }//GEN-LAST:event_SendSymKeyActionPerformed

    private void receivePublicRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receivePublicRSAActionPerformed
        SSLSocket sslsocket = null;
        InputStream inputstream = null;
        SSLServerSocket sslserversocket = null;
        DataInputStream dIn = null;
        try {
            System.setProperty("javax.net.ssl.keyStore", "mySrvKeystore");
            System.setProperty("javax.net.ssl.keyStorePassword", "123456");
            SSLServerSocketFactory sslserversocketfactory
                    = (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();
            sslserversocket
                    = (SSLServerSocket) sslserversocketfactory.createServerSocket(9999);
            System.out.println("Server started");
            sslsocket = (SSLSocket) sslserversocket.accept();

            inputstream = sslsocket.getInputStream();

            dIn = new DataInputStream(inputstream);
            byte[] key = null;
            int length = dIn.readInt();
            if (length > 0) {
                key = new byte[length];
                dIn.readFully(key, 0, key.length);
            }

            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(key);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            this.publicKey = keyFactory.generatePublic(keySpec);
            System.out.println("Received public key: " + savePublicKey(publicKey));
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                inputstream.close();
                sslsocket.close();
                sslserversocket.close();
                System.clearProperty("javax.net.ssl.keyStore");
                System.clearProperty("javax.net.ssl.keyStorePassword");
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_receivePublicRSAActionPerformed

    public static String savePublicKey(PublicKey publ) throws GeneralSecurityException {
        KeyFactory fact = KeyFactory.getInstance("RSA");
        X509EncodedKeySpec spec = fact.getKeySpec(publ,
                X509EncodedKeySpec.class);
        return new String(Base64.encodeBase64(spec.getEncoded()));
    }

    public static byte[] decrypt(byte[] dataBytes, SecretKey secretKey)
            throws Exception {
        java.util.Base64.Decoder decoder = java.util.Base64.getDecoder();
        byte[] encryptedTextByte = decoder.decode(dataBytes);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);
        return decryptedByte;
    }

    public static String encrypt(byte[] dataBytes, SecretKey secretKey)
            throws Exception {
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedByte = cipher.doFinal(dataBytes);

        java.util.Base64.Encoder encoder = java.util.Base64.getEncoder();
        String encryptedText = encoder.encodeToString(encryptedByte);
        return encryptedText;
    }

    private byte[] encryptByPublic(PublicKey publicKey, byte[] symmetricKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, GeneralSecurityException {
        //Encrypt symmetric key by public key
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] encryptedkey = cipher.doFinal(symmetricKey);
        return encryptedkey;
    }

    public void initAESKey() throws NoSuchAlgorithmException, NoSuchPaddingException {
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        this.symmetricKey = keyGenerator.generateKey();
        cipher = Cipher.getInstance("AES");
    }

    private String packData(Object obj) throws IOException, Exception {
        return encrypt(DataMethodHelper.compress(DataMethodHelper.serialize(obj)), symmetricKey);
    }

    private void parseData(ResultSet rs, List<String> assignments, List<String> classes, List<String> departments, List<String> instructors, List<String> results, List<String> students, List<String> studentsAndClasses) throws SQLException, NoSuchAlgorithmException, NoSuchPaddingException {
        while (rs.next()) {
            Students student = EntityHelper.createStudent(rs);
            StudentsAndClasses studentAndClass = EntityHelper.createStudentAndClass(rs);
            Classes studentClass = EntityHelper.createClass(rs);
            Results result = EntityHelper.createResult(rs);
            Assignments assignment = EntityHelper.createAssignment(rs);
            Departments department = EntityHelper.createDepartment(rs);
            Instructors instructor = EntityHelper.createInstructor(rs);

            try {
                if (!studentsIds.contains(student.getStudentId())) {
                    studentsIds.add(student.getStudentId());
                    String encStudent = encrypt(DataMethodHelper.compress(DataMethodHelper.serialize(student)), symmetricKey);
                    students.add(encStudent);
                    Object obj = DataMethodHelper.deserialize(DataMethodHelper.decompress(decrypt(encStudent.getBytes(), symmetricKey)));
                    
                }
                if (!studentsAndClassesIds.contains(studentAndClass.getStudentClassId())) {
                    studentsAndClassesIds.add(studentAndClass.getStudentClassId());
                    String encStudentAndClass = packData(student);
                    studentsAndClasses.add(encStudentAndClass);
                }
                if (!classesIds.contains(studentClass.getClassId())) {
                    classesIds.add(studentClass.getClassId());
                    String encStudentClass = packData(studentClass);;
                    classes.add(encStudentClass);
                }
                if (!resultsIds.contains(result.getResultsId())) {
                    resultsIds.add(result.getResultsId());
                    String encResult = packData(result);
                    results.add(encResult);
                }
                if (!assignmentsIds.contains(assignment.getAssignmentId())) {
                    assignmentsIds.add(assignment.getAssignmentId());
                    String encAssignment = packData(assignment);
                    assignments.add(encAssignment);
                }
                if (!departmentsIds.contains(department.getDepartmentId())) {
                    departmentsIds.add(department.getDepartmentId());
                    String encDepartment = packData(department);
                    departments.add(encDepartment);
                }
                if (!instructorsIds.contains(instructor.getInstructorId())) {
                    instructorsIds.add(instructor.getInstructorId());
                    String encInstructor = packData(instructor);
                    instructors.add(encInstructor);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton MQButton;
    private javax.swing.JButton SendDataButton;
    private javax.swing.JButton SendSymKey;
    private javax.swing.JRadioButton SocketsButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton receivePublicRSA;
    // End of variables declaration//GEN-END:variables
}
