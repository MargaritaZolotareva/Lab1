/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.springapp.accesstomysqlconverter;

import com.springapp.entities.Assignments;
import com.springapp.entities.Classes;
import com.springapp.entities.Departments;
import com.springapp.entities.Instructors;
import com.springapp.entities.Results;
import com.springapp.entities.Students;
import com.springapp.entities.StudentsAndClasses;
import com.springapp.helpers.DataMethodHelper;
import com.springapp.helpers.EntityHelper;
import com.springapp.helpers.ExportHelper;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.*;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import org.apache.commons.codec.binary.Base64;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author Margarita
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        convertButton = new javax.swing.JButton();
        exportStudentsButton = new javax.swing.JButton();
        exportResultsButton = new javax.swing.JButton();
        launchMQKeyReceiver = new javax.swing.JButton();
        sendPublicRSA = new javax.swing.JButton();
        launchDataReceiver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        convertButton.setLabel("Convert data");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        exportStudentsButton.setLabel("Export students to Excel");
        exportStudentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportStudentsButtonActionPerformed(evt);
            }
        });

        exportResultsButton.setLabel("Export results to Excel");
        exportResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportResultsButtonActionPerformed(evt);
            }
        });

        launchMQKeyReceiver.setText("Launch sym key receiver");
        launchMQKeyReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchMQKeyReceiverActionPerformed(evt);
            }
        });

        sendPublicRSA.setText("Send public RSA");
        sendPublicRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPublicRSAActionPerformed(evt);
            }
        });

        launchDataReceiver.setText("Launch data receiver");
        launchDataReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchDataReceiverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(launchDataReceiver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(launchMQKeyReceiver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportStudentsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(convertButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportResultsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sendPublicRSA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(convertButton)
                .addGap(18, 18, 18)
                .addComponent(exportStudentsButton)
                .addGap(18, 18, 18)
                .addComponent(exportResultsButton)
                .addGap(18, 18, 18)
                .addComponent(launchMQKeyReceiver)
                .addGap(18, 18, 18)
                .addComponent(sendPublicRSA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(launchDataReceiver)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static HashSet assignmentsIds = new HashSet();
    static HashSet classesIds = new HashSet();
    static HashSet departmentsIds = new HashSet();
    static HashSet instructorsIds = new HashSet();
    static HashSet resultsIds = new HashSet();
    static HashSet studentsIds = new HashSet();
    static HashSet studentsAndClassesIds = new HashSet();
    static Cipher cipher;
    PublicKey publicKey;
    PrivateKey privateKey;
    SecretKey symmetricKey;

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        try {
            Connection conn = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/user/Desktop/Students.accdb");
            Statement s = conn.createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM Denormalized");

            while (rs.next()) {
                Students student = EntityHelper.createStudent(rs);
                StudentsAndClasses studentAndClass = EntityHelper.createStudentAndClass(rs);
                Classes studentClass = EntityHelper.createClass(rs);
                Results result = EntityHelper.createResult(rs);
                Assignments assignment = EntityHelper.createAssignment(rs);
                Departments department = EntityHelper.createDepartment(rs);
                Instructors instructor = EntityHelper.createInstructor(rs);

                SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
                Session session = sessionFactory.openSession();
                try {
                    Transaction tx1 = session.beginTransaction();
                    if (!studentsIds.contains(student.getStudentId())) {
                        studentsIds.add(student.getStudentId());
                        session.save(student);
                    }
                    if (!studentsAndClassesIds.contains(studentAndClass.getStudentClassId())) {
                        studentsAndClassesIds.add(studentAndClass.getStudentClassId());
                        session.save(studentAndClass);
                    }
                    if (!classesIds.contains(studentClass.getClassId())) {
                        classesIds.add(studentClass.getClassId());
                        session.save(studentClass);
                    }
                    if (!resultsIds.contains(result.getResultsId())) {
                        resultsIds.add(result.getResultsId());
                        session.save(result);
                    }
                    if (!assignmentsIds.contains(assignment.getAssignmentId())) {
                        assignmentsIds.add(assignment.getAssignmentId());
                        session.save(assignment);
                    }
                    if (!departmentsIds.contains(department.getDepartmentId())) {
                        departmentsIds.add(department.getDepartmentId());
                        session.save(department);
                    }
                    if (!instructorsIds.contains(instructor.getInstructorId())) {
                        instructorsIds.add(instructor.getInstructorId());
                        session.save(instructor);
                    }
                    System.out.println("3. Before committing save transaction");
                    tx1.commit();
                    System.out.println("4. After committing save transaction");
                    System.out.println("*****");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                if (session != null) {
                    session.close();
                }
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    private void exportStudentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportStudentsButtonActionPerformed
        try {
            List<Students> students = new ArrayList<>();
            try {
                Class.forName("com.mysql.jdbc.Driver");
                String user = "root";
                String password = "admin";
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/students?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC", user, password);

                PreparedStatement st = con.prepareStatement("select * from students");
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    students.add(new Students(rs.getInt(1), rs.getString(2), rs.getString(3)));
                }
                con.close();
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            String excelFilePath = "All Students.xls";
            ExportHelper.writeExcel(students, excelFilePath);
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_exportStudentsButtonActionPerformed

    private void exportResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportResultsButtonActionPerformed
        try {
            ResultSet rs;
            String excelFilePath = "All Results.xls";
            try {
                Class.forName("com.mysql.jdbc.Driver");
                String user = "root";
                String password = "admin";
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/students?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC", user, password);

                PreparedStatement st = con.prepareStatement("SELECT FirstName, LastName, PhoneNumber, EmailName, Major, Score, Late, AssignmentsDescription, Exam, PercentOfGrade, MaximumPoints \n"
                        + "FROM students.assignments INNER JOIN (students.students INNER JOIN students.results\n"
                        + "ON students.students.StudentID = students.results.StudentID) \n"
                        + "ON students.assignments.AssignmentID = students.results.AssignmentID");
                rs = st.executeQuery();

                ExportHelper.writeResultsExcel(rs, excelFilePath);
                con.close();
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportResultsButtonActionPerformed

    private void launchMQKeyReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchMQKeyReceiverActionPerformed
        QueueConnectionFactory queueFactory = null;
        QueueConnection con = null;
        QueueSession ses = null;
        Queue keyQueue = null;
        QueueReceiver receiver = null;

        try {
            Properties props = new Properties();
            props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
            props.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");
            props.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
            props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
            props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");
            Context ctx = new InitialContext(props);

            queueFactory = (QueueConnectionFactory) ctx.lookup("myQueueConnectionFactory");
            con = queueFactory.createQueueConnection();
            con.start();
            ses = con.createQueueSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
            keyQueue = (Queue) ctx.lookup("keyQueue");
            receiver = ses.createReceiver(keyQueue);

            Message message = receiver.receive();
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            byte[] msbody = message.getBody(byte[].class);
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] symKey = cipher.doFinal(msbody);

            this.cipher = Cipher.getInstance("AES");
            this.symmetricKey = new SecretKeySpec(symKey, 0, symKey.length, "AES");
            System.out.println("Key received:" + new String(Base64.encodeBase64(symKey)));
        } catch (InvalidKeyException | NoSuchAlgorithmException | BadPaddingException | IllegalBlockSizeException | NoSuchPaddingException | JMSException | NamingException e) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, e);
        } finally {
            try {
                receiver.close();
                ses.close();
                con.close();
            } catch (JMSException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_launchMQKeyReceiverActionPerformed

    private void initRSAKeys() throws NoSuchAlgorithmException {
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(512);
        KeyPair pair = keyGen.generateKeyPair();
        privateKey = pair.getPrivate();
        publicKey = pair.getPublic();
    }

    private void sendPublicRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPublicRSAActionPerformed
        OutputStream outputstream = null;
        DataOutputStream dOut = null;
        SSLSocket sslsocket = null;
        try {
            initRSAKeys();

            System.setProperty("javax.net.ssl.trustStore", "mySrvKeystore");
            System.setProperty("javax.net.ssl.trustStorePassword", "123456");
            SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            sslsocket = (SSLSocket) sslsocketfactory.createSocket("localhost", 9999);
            sslsocket.startHandshake();

            outputstream = sslsocket.getOutputStream();
            dOut = new DataOutputStream(outputstream);
            dOut.writeInt(publicKey.getEncoded().length); // write length of the message
            dOut.write(publicKey.getEncoded());
        } catch (IOException | GeneralSecurityException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                sslsocket.close();
                dOut.close();
                outputstream.close();
                this.sendPublicRSA.setEnabled(false);
                System.clearProperty("javax.net.ssl.trustStore");
                System.clearProperty("javax.net.ssl.trustStorePassword");
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_sendPublicRSAActionPerformed

    private void launchDataReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchDataReceiverActionPerformed
        try {
            launchMQServer();
            launchSocketsServer();
        } catch (NoSuchAlgorithmException | NoSuchPaddingException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_launchDataReceiverActionPerformed

    public static byte[] decrypt(byte[] dataBytes, SecretKey secretKey)
            throws Exception {
        byte[] encryptedTextByte = Base64.decodeBase64(dataBytes);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);
        return decryptedByte;
    }

    private void launchSocketsServer() throws NoSuchAlgorithmException, NoSuchPaddingException {
        //cipher = Cipher.getInstance("AES");
        //this.symmetricKey = new SecretKeySpec(Base64.decodeBase64("Sct1EfmbT4ILo/CmKD5A1g=="), 0, Base64.decodeBase64("Sct1EfmbT4ILo/CmKD5A1g==").length, "AES");
        //SecretKey originalKey = new SecretKeySpec(this.symmetricKey.getEncoded(), 0, this.symmetricKey.getEncoded().length, "AES");
        ServerSocket serverSocket;
        Socket socket = null;
        SessionFactory sessionFactory;
        Session session = null;
        ObjectInputStream inStream;
        try {
            sessionFactory = HibernateUtil.getSessionFactory();
            serverSocket = new ServerSocket(2004, 10);
            while (true) {
                socket = serverSocket.accept();

                inStream = new ObjectInputStream(socket.getInputStream());

                ArrayList list = (ArrayList) inStream.readObject();
                System.out.println("Object from sockets received: " + list);

                ArrayList decrypted = new ArrayList();
                for (Object obj : list) {
                    Object o = DataMethodHelper.deserialize(DataMethodHelper.decompress(decrypt(obj.toString().getBytes(), this.symmetricKey)));
                    decrypted.add(o);
                }
                String objClass = decrypted.get(0).getClass().toString().replace("class com.springapp.entities.", "");
                session = sessionFactory.openSession();
                Transaction tx = session.beginTransaction();
                switch (objClass) {
                    case "Students":
                        for (Object obj : decrypted) {
                            Students student = (Students) obj;
                            System.out.println("Student found!");
                            session.save(student);
                        }
                        break;
                    case "StudentsAndClasses":
                        for (Object obj : decrypted) {
                            StudentsAndClasses studentAndClass = (StudentsAndClasses) obj;
                            System.out.println("StudentAndClass found!");
                            session.save(studentAndClass);
                        }
                        break;
                    case "Classes":
                        for (Object obj : decrypted) {
                            Classes studentsClass = (Classes) obj;
                            System.out.println("Class found!");
                            session.save(studentsClass);
                        }
                        break;
                    case "Results":
                        for (Object obj : decrypted) {
                            Results result = (Results) obj;
                            System.out.println("Result found!");
                            session.save(result);
                        }
                        break;
                    case "Assignments":
                        for (Object obj : decrypted) {
                            Assignments assignment = (Assignments) obj;
                            System.out.println("Assignment found!");
                            session.save(assignment);
                        }
                        break;
                    case "Departments":
                        for (Object obj : decrypted) {
                            Departments department = (Departments) obj;
                            System.out.println("Department found!");
                            session.save(department);
                        }
                        break;
                    case "Instructors":
                        for (Object obj : decrypted) {
                            Instructors instructor = (Instructors) obj;
                            System.out.println("Instructor found!");
                            session.save(instructor);
                        }
                        break;
                }
                tx.commit();
                session.close();
                socket.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                socket.close();
                if (session != null) {
                    session.close();
                }
            } catch (IOException | HibernateException e) {
            }
        }
    }

    private void launchMQServer() throws NoSuchAlgorithmException, NoSuchPaddingException {
        //cipher = Cipher.getInstance("AES");
        //this.symmetricKey = new SecretKeySpec(Base64.decodeBase64("Sct1EfmbT4ILo/CmKD5A1g=="), 0, Base64.decodeBase64("Sct1EfmbT4ILo/CmKD5A1g==").length, "AES");
        //SecretKey originalKey = new SecretKeySpec(this.symmetricKey.getEncoded(), 0, this.symmetricKey.getEncoded().length, "AES");
        SessionFactory sessionFactory;
        Session session = null;
        try {
            Properties props = new Properties();
            props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
            props.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");
            props.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
            props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
            props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");
            Context ctx = new InitialContext(props);

            QueueConnectionFactory f = (QueueConnectionFactory) ctx.lookup("myQueueConnectionFactory");
            QueueConnection con = f.createQueueConnection();
            con.start();
            QueueSession ses = con.createQueueSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
            Queue t = (Queue) ctx.lookup("dataQueue");
            QueueReceiver receiver = ses.createReceiver(t);
            sessionFactory = HibernateUtil.getSessionFactory();
            MyListener listener = new MyListener(this.symmetricKey, sessionFactory);
            receiver.setMessageListener(listener);

            System.out.println("Data receiver is ready, waiting for messages...");
        } catch (JMSException | NamingException e) {
            System.out.println(e);
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertButton;
    private javax.swing.JButton exportResultsButton;
    private javax.swing.JButton exportStudentsButton;
    private javax.swing.JButton launchDataReceiver;
    private javax.swing.JButton launchMQKeyReceiver;
    private javax.swing.JButton sendPublicRSA;
    // End of variables declaration//GEN-END:variables
}
