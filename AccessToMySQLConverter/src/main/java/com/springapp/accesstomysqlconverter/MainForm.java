/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.springapp.accesstomysqlconverter;

import com.springapp.entities.Assignments;
import com.springapp.entities.Classes;
import com.springapp.entities.Departments;
import com.springapp.entities.Instructors;
import com.springapp.entities.Results;
import com.springapp.entities.Students;
import com.springapp.entities.StudentsAndClasses;
import static com.sun.xml.messaging.saaj.util.Base64.base64Decode;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.*;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.EncodedKeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import org.apache.commons.codec.binary.Base64;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import static org.eclipse.persistence.internal.oxm.conversion.Base64.base64Encode;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author Margarita
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        convertButton = new javax.swing.JButton();
        exportStudentsButton = new javax.swing.JButton();
        exportResultsButton = new javax.swing.JButton();
        launchMQKeyReceiver = new javax.swing.JButton();
        sendPublicRSA = new javax.swing.JButton();
        launchDataReceiver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        convertButton.setLabel("Convert data");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        exportStudentsButton.setLabel("Export students to Excel");
        exportStudentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportStudentsButtonActionPerformed(evt);
            }
        });

        exportResultsButton.setLabel("Export results to Excel");
        exportResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportResultsButtonActionPerformed(evt);
            }
        });

        launchMQKeyReceiver.setText("Launch sym key receiver");
        launchMQKeyReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchMQKeyReceiverActionPerformed(evt);
            }
        });

        sendPublicRSA.setText("Send public RSA");
        sendPublicRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPublicRSAActionPerformed(evt);
            }
        });

        launchDataReceiver.setText("Launch data receiver");
        launchDataReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchDataReceiverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(launchDataReceiver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(launchMQKeyReceiver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportStudentsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(convertButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportResultsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sendPublicRSA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(convertButton)
                .addGap(18, 18, 18)
                .addComponent(exportStudentsButton)
                .addGap(18, 18, 18)
                .addComponent(exportResultsButton)
                .addGap(18, 18, 18)
                .addComponent(launchMQKeyReceiver)
                .addGap(18, 18, 18)
                .addComponent(sendPublicRSA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(launchDataReceiver)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static HashSet assignmentsIds = new HashSet();
    static HashSet classesIds = new HashSet();
    static HashSet departmentsIds = new HashSet();
    static HashSet instructorsIds = new HashSet();
    static HashSet resultsIds = new HashSet();
    static HashSet studentsIds = new HashSet();
    static HashSet studentsAndClassesIds = new HashSet();
    static Cipher cipher;
    PublicKey publicKey;
    PrivateKey privateKey;
    SecretKey symmetricKey;

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        try {
            Connection conn = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/Margarita/Desktop/Students.accdb");
            Statement s = conn.createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM Denormalized");

            while (rs.next()) {
                Students student = createStudent(rs);
                StudentsAndClasses studentAndClass = createStudentAndClass(rs);
                Classes studentClass = createClass(rs);
                Results result = createResult(rs);
                Assignments assignment = createAssignment(rs);
                Departments department = createDepartment(rs);
                Instructors instructor = createInstructor(rs);

                SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
                Session session = sessionFactory.openSession();
                try {
                    Transaction tx1 = session.beginTransaction();
                    if (!studentsIds.contains(student.getStudentId())) {
                        studentsIds.add(student.getStudentId());
                        session.save(student);
                    }
                    if (!studentsAndClassesIds.contains(studentAndClass.getStudentClassId())) {
                        studentsAndClassesIds.add(studentAndClass.getStudentClassId());
                        session.save(studentAndClass);
                    }
                    if (!classesIds.contains(studentClass.getClassId())) {
                        classesIds.add(studentClass.getClassId());
                        session.save(studentClass);
                    }
                    if (!resultsIds.contains(result.getResultsId())) {
                        resultsIds.add(result.getResultsId());
                        session.save(result);
                    }
                    if (!assignmentsIds.contains(assignment.getAssignmentId())) {
                        assignmentsIds.add(assignment.getAssignmentId());
                        session.save(assignment);
                    }
                    if (!departmentsIds.contains(department.getDepartmentId())) {
                        departmentsIds.add(department.getDepartmentId());
                        session.save(department);
                    }
                    if (!instructorsIds.contains(instructor.getInstructorId())) {
                        instructorsIds.add(instructor.getInstructorId());
                        session.save(instructor);
                    }
                    System.out.println("3. Before committing save transaction");
                    tx1.commit();
                    System.out.println("4. After committing save transaction");
                    System.out.println("*****");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                if (session != null) {
                    session.close();
                }
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    private void exportStudentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportStudentsButtonActionPerformed
        try {
            List<Students> students = new ArrayList<Students>();
            try {
                // TODO add your handling code here:
                Class.forName("com.mysql.jdbc.Driver");
                String user = "root";
                String password = "admin";
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/students?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC", user, password);

                PreparedStatement st = con.prepareStatement("select * from students");
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    students.add(new Students(rs.getInt(1), rs.getString(2), rs.getString(3)));
                }
                con.close();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            String excelFilePath = "All Students.xls";
            writeExcel(students, excelFilePath);

        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_exportStudentsButtonActionPerformed

    private void exportResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportResultsButtonActionPerformed
        try {
            ResultSet rs = null;
            String excelFilePath = "All Results.xls";
            try {
                Class.forName("com.mysql.jdbc.Driver");
                String user = "root";
                String password = "admin";
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/students?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC", user, password);

                PreparedStatement st = con.prepareStatement("SELECT FirstName, LastName, PhoneNumber, EmailName, Major, Score, Late, AssignmentsDescription, Exam, PercentOfGrade, MaximumPoints \n"
                        + "FROM students.assignments INNER JOIN (students.students INNER JOIN students.results\n"
                        + "ON students.students.StudentID = students.results.StudentID) \n"
                        + "ON students.assignments.AssignmentID = students.results.AssignmentID");
                rs = st.executeQuery();

                writeResultsExcel(rs, excelFilePath);
                con.close();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportResultsButtonActionPerformed

    private void launchMQKeyReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchMQKeyReceiverActionPerformed
        QueueConnectionFactory queueFactory = null;
        QueueConnection con = null;
        QueueSession ses = null;
        Queue keyQueue = null;
        QueueReceiver receiver = null;

        try {
            Properties props = new Properties();
            props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
            props.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");
            props.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
            props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
            props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");
            Context ctx = new InitialContext(props);

            queueFactory = (QueueConnectionFactory) ctx.lookup("myQueueConnectionFactory");
            con = queueFactory.createQueueConnection();
            con.start();
            ses = con.createQueueSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
            keyQueue = (Queue) ctx.lookup("keyQueue");
            receiver = ses.createReceiver(keyQueue);

            Message message = receiver.receive();
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            byte[] msbody = message.getBody(byte[].class);
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] symKey = cipher.doFinal(msbody);

            this.symmetricKey = new SecretKeySpec(symKey, 0, symKey.length, "AES");
            System.out.println("Key received:" + new String(base64Encode(symKey)));
        } catch (Exception e) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, e);
        } finally {
            try {
                receiver.close();
                ses.close();
                con.close();
            } catch (JMSException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_launchMQKeyReceiverActionPerformed

    private void initRSAKeys() throws NoSuchAlgorithmException {
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(512);
        KeyPair pair = keyGen.generateKeyPair();
        privateKey = pair.getPrivate();
        publicKey = pair.getPublic();
    }

    private void sendPublicRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPublicRSAActionPerformed
        OutputStream outputstream = null;
        OutputStreamWriter outputstreamwriter = null;
        BufferedWriter bufferedwriter = null;
        DataOutputStream dOut = null;
        SSLSocket sslsocket = null;
        try {
            initRSAKeys();

            System.setProperty("javax.net.ssl.trustStore", "mySrvKeystore");
            System.setProperty("javax.net.ssl.trustStorePassword", "123456");
            SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            sslsocket = (SSLSocket) sslsocketfactory.createSocket("localhost", 9999);
            sslsocket.startHandshake();

            outputstream = sslsocket.getOutputStream();
            //outputstreamwriter = new OutputStreamWriter(outputstream);
            //bufferedwriter = new BufferedWriter(outputstreamwriter);
            dOut = new DataOutputStream(outputstream);
            dOut.writeInt(publicKey.getEncoded().length); // write length of the message
            dOut.write(publicKey.getEncoded());
            //bufferedwriter.write(publicKey.getEncoded());
            //bufferedwriter.flush();
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (GeneralSecurityException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                sslsocket.close();
                //bufferedwriter.close();
                //outputstreamwriter.close();
                dOut.close();
                outputstream.close();
                this.sendPublicRSA.setEnabled(false);
                System.clearProperty("javax.net.ssl.trustStore");
                System.clearProperty("javax.net.ssl.trustStorePassword");
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_sendPublicRSAActionPerformed

    private void launchDataReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchDataReceiverActionPerformed
        launchMQServer();
        launchSocketsServer();
    }//GEN-LAST:event_launchDataReceiverActionPerformed

    private void launchSocketsServer() {
        ServerSocket providerSocket = null;
        Socket connection = null;
        ObjectOutputStream out = null;
        ObjectInputStream in = null;
        String message = null;
        try {
            //1. creating a server socket
            providerSocket = new ServerSocket(2004, 10);
            //2. Wait for connection
            System.out.println("Waiting for connection");
            connection = providerSocket.accept();
            System.out.println("Connection received from " + connection.getInetAddress().getHostName());
            //3. get Input and Output streams
            out = new ObjectOutputStream(connection.getOutputStream());
            out.flush();
            in = new ObjectInputStream(connection.getInputStream());

            out.writeObject("Connection successful");
            out.flush();
            System.out.println("server>" + "Connection successful");
            //4. The two parts communicate via the input and output streams
            do {
                try {
                    message = (String) in.readObject();
                    System.out.println("client>" + message);
                    if (message.equals("bye")) {
                        out.writeObject("bye");
                        out.flush();
                        System.out.println("server>" + "bye");
                    }
                } catch (ClassNotFoundException classnot) {
                    System.err.println("Data received in unknown format");
                }
            } while (!message.equals("bye"));
        } catch (IOException ioException) {
            ioException.printStackTrace();
        } finally {
            //4: Closing connection
            try {
                in.close();
                out.close();
                providerSocket.close();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }

    private void launchMQServer() {
        SessionFactory sessionFactory = null;
        Session session = null;
        try {
            Properties props = new Properties();
            props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
            props.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");
            props.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
            props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
            props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");
            Context ctx = new InitialContext(props);

            QueueConnectionFactory f = (QueueConnectionFactory) ctx.lookup("myQueueConnectionFactory");
            QueueConnection con = f.createQueueConnection();
            con.start();
            QueueSession ses = con.createQueueSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
            Queue t = (Queue) ctx.lookup("dataQueue");
            QueueReceiver receiver = ses.createReceiver(t);
            sessionFactory = HibernateUtil.getSessionFactory();
            session = sessionFactory.openSession();
            MyListener listener = new MyListener(this.symmetricKey.getEncoded(), session);
            receiver.setMessageListener(listener);

            System.out.println("Data receiver is ready, waiting for messages...");
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (session != null) {
                session.close();
            }
        }
}

public void writeExcel(List<Students> students, String excelFilePath) throws IOException {
        Workbook workbook = new HSSFWorkbook();
        Sheet sheet = workbook.createSheet();

        int rowCount = 0;

        for (Students student : students) {
            Row row = sheet.createRow(++rowCount);
            writeStudent(student, row);
        }

        try (FileOutputStream outputStream = new FileOutputStream(excelFilePath)) {
            workbook.write(outputStream);
        }
    }

    public void writeResultsExcel(ResultSet results, String excelFilePath) throws IOException, SQLException {
        Workbook workbook = new HSSFWorkbook();
        Sheet sheet = workbook.createSheet();

        int rowCount = 0;
        while (results.next()) {
            Row row = sheet.createRow(++rowCount);
            writeResult(results, row);
        }

        try (FileOutputStream outputStream = new FileOutputStream(excelFilePath)) {
            workbook.write(outputStream);
        }
    }

    private void writeResult(ResultSet rs, Row row) throws SQLException {
        Cell cell = row.createCell(0);
        cell.setCellValue(rs.getString(1));

        cell = row.createCell(1);
        cell.setCellValue(rs.getString(2));

        cell = row.createCell(2);
        cell.setCellValue(rs.getString(3));

        cell = row.createCell(3);
        cell.setCellValue(rs.getString(4));

        cell = row.createCell(4);
        cell.setCellValue(rs.getString(5));

        cell = row.createCell(5);
        cell.setCellValue(rs.getInt(6));

        cell = row.createCell(6);
        cell.setCellValue(rs.getBoolean(7));

        cell = row.createCell(7);
        cell.setCellValue(rs.getString(8));

        cell = row.createCell(8);
        cell.setCellValue(rs.getBoolean(9));

        cell = row.createCell(9);
        cell.setCellValue(rs.getDouble(10));

        cell = row.createCell(10);
        cell.setCellValue(rs.getInt(11));
    }

    private void writeStudent(Students student, Row row) {
        Cell cell = row.createCell(0);
        cell.setCellValue(student.getStudentId());

        cell = row.createCell(1);
        cell.setCellValue(student.getFirstName());

        cell = row.createCell(2);
        cell.setCellValue(student.getLastName());
    }

    static Students createStudent(ResultSet rs) throws SQLException {
        Students student = new Students();

        student.setFirstName(rs.getString(1));
        student.setLastName(rs.getString(2));
        student.setStudentId(rs.getInt(3));
        student.setParentsNames(rs.getString(4));
        student.setAddress(rs.getString(5));
        student.setCity(rs.getString(6));
        student.setStateOrProvince(rs.getString(7));
        student.setPostalCode(rs.getString(8));
        student.setPhoneNumber(rs.getString(9));
        student.setEmailName(rs.getString(10));
        student.setMajor(rs.getString(11));
        student.setStudentNumber(rs.getString(12));
        student.setNotes(rs.getString(13));

        return student;
    }

    static StudentsAndClasses createStudentAndClass(ResultSet rs) throws SQLException {
        StudentsAndClasses studentsAndClasses = new StudentsAndClasses();

        studentsAndClasses.setStudentClassId(rs.getInt(14));
        studentsAndClasses.setClassId(rs.getInt(15));
        studentsAndClasses.setStudentId(rs.getInt(16));
        studentsAndClasses.setGrade(rs.getString(17));

        return studentsAndClasses;
    }

    static Classes createClass(ResultSet rs) throws SQLException {
        Classes classes = new Classes();

        classes.setClassId(rs.getInt(18));
        classes.setClassName(rs.getString(19));
        classes.setSectionNum(rs.getInt(20));
        classes.setTerm(rs.getString(21));
        classes.setUnits(rs.getString(22));
        classes.setYear(rs.getInt(23));
        classes.setLocation(rs.getString(24));
        classes.setDaysAndTimes(rs.getString(25));
        classes.setNotes(rs.getString(26));

        return classes;
    }

    static Results createResult(ResultSet rs) throws SQLException {
        Results results = new Results();

        results.setResultsId(rs.getInt(27));
        results.setStudentId(rs.getInt(28));
        results.setAssignmentId(rs.getInt(29));
        results.setScore(rs.getInt(46));
        results.setLate(rs.getBoolean(30));

        return results;
    }

    static Assignments createAssignment(ResultSet rs) throws SQLException {
        Assignments assignment = new Assignments();

        assignment.setAssignmentId(rs.getInt(31));
        assignment.setAssignmentsDescription(rs.getString(32));
        assignment.setClassId(rs.getInt(33));
        assignment.setExam(rs.getBoolean(34));
        assignment.setPercentOfGrade(rs.getFloat(35));
        assignment.setMaximumPoints(rs.getInt(47));

        return assignment;
    }

    static Departments createDepartment(ResultSet rs) throws SQLException {
        Departments department = new Departments();

        department.setDepartmentId(rs.getInt(36));
        department.setDepartmentName(rs.getString(37));
        department.setDepartmentNumber(rs.getInt(38));
        department.setDepartmentManager(rs.getString(39));
        department.setDepartmentChairperson(rs.getString(40));

        return department;
    }

    static Instructors createInstructor(ResultSet rs) throws SQLException {
        Instructors instructor = new Instructors();

        instructor.setInstructorId(rs.getInt(41));
        instructor.setInstructor(rs.getString(42));
        instructor.setEmailName(rs.getString(43));
        instructor.setPhoneNumber(rs.getString(44));
        instructor.setExtension(rs.getString(45));

        return instructor;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertButton;
    private javax.swing.JButton exportResultsButton;
    private javax.swing.JButton exportStudentsButton;
    private javax.swing.JButton launchDataReceiver;
    private javax.swing.JButton launchMQKeyReceiver;
    private javax.swing.JButton sendPublicRSA;
    // End of variables declaration//GEN-END:variables
}
